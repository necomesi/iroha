/*! "iroha.scrollObserver.js" | Iroha - Necomesi JSLib : Scroll Observer | by Necomesi Ltd. *//* -------------------------------------------------------------------------- *//** *    @fileoverview *       Iroha - Necomesi JSLib : Scroll Observer *       (charset : "UTF-8") * *    @version 3.00.2013xxxx *    @requires jquery.js *    @requires iroha.js *//* -------------------------------------------------------------------------- */(function($, Iroha, window, document) {/* -------------------- Class : Iroha.HogeFuga -------------------- *//** * @class * @extends Iroha.Observable */Iroha.HogeFuga = function() {	/**	 * オプション設定オブジェクト	 * @type Iroha.HogeFuga.Setting	 */	this.setting = undefined;	/**	 * 基底要素ノード（見切れ状態をチェックする対象要素ノード）	 * @type jQuery	 */	this.$node = $();	/**	 * 基底要素ノードを包含する要素ノード、あるいは window 。表示域を持ち、スクロールさせつつ内容を表示している。	 * @type jQuery	 */	this.$view = $(window);	/**	 * 見切れ状況。	 * 基底要素ノードが表示域の中にある:"inside", 外にある:"outside", 一部が領域内にある:"partial"	 * @type String	 * @private	 */	this.status = 'outside';};Iroha.ViewClass(Iroha.HogeFuga).extend(Iroha.Observable);$.extend(Iroha.HogeFuga.prototype,/** @lends Iroha.HogeFuga.prototype */{	/**	 * initialize	 * @param {Element|jQuery|String}   node        基底要素ノード（見切れ状態をチェックする対象要素ノード）	 * @param {Iroha.HogeFuga.Setting} [setting]    オプション設定オブジェクト	 * @return this instance	 * @type Iroha.HogeFuga	 */	init : function(node, setting) {		this.setting = $.extend(Iroha.HogeFuga.Setting.create(), setting);		this.$node   = $(node).eq(0);		this.$view   = $(this.setting.view || window).eq(0);		// 見切れ状況確認処理の多重発動を抑止。と同時に最初の状況確認がここで行われる。		var update = Iroha.barrageShield(function() { this.update() }, this.setting.pollDelay, this);		// DOM イベント付与		this.$view.bind('scroll.Iroha.HogeFuga resize.Iroha.HogeFuga', update);		return this;	},	/**	 * このインスタンスを破棄する	 */	dispose : function() {		try { this.$view.unbind('scroll.Iroha.HogeFuga resize.Iroha.HogeFuga') } catch(err) { }		this.constructor.disposeInstance(this);	},	/**	 * 見切れ状況を確認してステータスをアップデートする	 * @return 基底要素ノードが表示域の中にある:"inside", 外にある:"outside", 一部が領域内にある:"partial"	 * @type String	 */	update : function() {		// スクロール領域の表示域範囲を算出		if (this.$view.get(0) == window) {			var geom = Iroha.getGeometry();			var view = {				  left   : geom.scrollX				, right  : geom.scrollX + geom.windowW				, top    : geom.scrollY				, bottom : geom.scrollY + geom.windowH			};		} else {			var view = this.$view.offset();			$.extend(view, {				  right  : view.left + this.$view.outerWidth ()				, bottom : view.top  + this.$view.outerHeight()			});		}		// 基底要素の位置を算出		var node = this.$node.offset();		$.extend(node, {			  right  : node.left + this.$node.outerWidth ()			, bottom : node.top  + this.$node.outerHeight()		});		// ステータスチェック		var status =			(view.left >  node.right || view.right <  node.left  || view.top > node.bottom || view.bottom <  node.top   ) ? 'outside' :			(view.left <= node.left  && view.right >= node.right && view.top <= node.top   && view.bottom >= node.bottom) ? 'inside'  :			                                                                                                                'partial' ;		this.doCallback('statusUpdate', status, view, node);		if (this.status != status) {			this.status = status;			this.doCallback('statusChange', status, view, node);		}		return status;	},	/**	 * 見切れ状態を返す	 * @return 基底要素ノードが表示域の中にある:"inside", 外にある:"outside", 一部が領域内にある:"partial"	 * @type String	 */	getStatus : function() {		return this.update();	}});/* -------------------- Class : Iroha.HogeFuga.Setting -------------------- *//** * setting data object for {@link Iroha.HogeFuga} * @class setting data object for {@link Iroha.HogeFuga} */Iroha.HogeFuga.Setting = function() {	/**	 * スクロール領域 (CSS:overflow) を形成する要素ノード、あるいは window オブジェクト。	 * @type Window|jQuery|Element|String	 */	this.view = window;	/**	 * スクロールやウインドウリサイズ等のイベント駆動による見切れ状況確認をする際の、最大遅延時間。ミリ秒（非負整数）で指定。	 * @type Number	 */	this.pollDelay = 100;};/** * create an instance and return. * @type Iroha.Crossfader.Setting */Iroha.HogeFuga.Setting.create = function() {	return new this;};})(Iroha.$, Iroha, window, document);